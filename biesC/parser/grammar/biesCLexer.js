// Generated from ./grammar/biesC.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,40,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,
1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,
16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,
1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,
26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
1,29,1,29,1,30,1,30,1,31,3,31,184,8,31,1,31,4,31,187,8,31,11,31,12,31,188,
1,32,3,32,192,8,32,1,32,4,32,195,8,32,11,32,12,32,196,1,32,1,32,4,32,201,
8,32,11,32,12,32,202,1,33,3,33,206,8,33,1,33,4,33,209,8,33,11,33,12,33,210,
1,33,1,33,4,33,215,8,33,11,33,12,33,216,3,33,219,8,33,1,33,1,33,3,33,223,
8,33,1,33,4,33,226,8,33,11,33,12,33,227,1,34,1,34,1,34,1,34,5,34,234,8,34,
10,34,12,34,237,9,34,1,34,1,34,1,35,4,35,242,8,35,11,35,12,35,243,1,35,1,
35,1,36,1,36,1,36,1,36,5,36,252,8,36,10,36,12,36,255,9,36,1,36,1,36,1,37,
1,37,1,37,1,37,5,37,263,8,37,10,37,12,37,266,9,37,1,37,1,37,1,37,1,37,1,
37,1,38,1,38,5,38,275,8,38,10,38,12,38,278,9,38,1,39,1,39,1,39,3,39,283,
8,39,1,264,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
73,37,75,38,77,39,79,40,1,0,9,1,0,45,45,1,0,48,57,2,0,69,69,101,101,2,0,
43,43,45,45,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,65,
90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,302,0,1,1,0,0,0,0,3,1,0,0,0,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,1,0,0,0,3,85,
1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,91,1,0,0,0,11,94,1,0,0,0,13,97,1,0,0,
0,15,102,1,0,0,0,17,107,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,115,1,0,
0,0,25,118,1,0,0,0,27,124,1,0,0,0,29,130,1,0,0,0,31,132,1,0,0,0,33,134,1,
0,0,0,35,136,1,0,0,0,37,138,1,0,0,0,39,140,1,0,0,0,41,143,1,0,0,0,43,146,
1,0,0,0,45,148,1,0,0,0,47,151,1,0,0,0,49,153,1,0,0,0,51,156,1,0,0,0,53,161,
1,0,0,0,55,167,1,0,0,0,57,172,1,0,0,0,59,178,1,0,0,0,61,180,1,0,0,0,63,183,
1,0,0,0,65,191,1,0,0,0,67,205,1,0,0,0,69,229,1,0,0,0,71,241,1,0,0,0,73,247,
1,0,0,0,75,258,1,0,0,0,77,272,1,0,0,0,79,282,1,0,0,0,81,82,5,102,0,0,82,
83,5,117,0,0,83,84,5,110,0,0,84,2,1,0,0,0,85,86,5,40,0,0,86,4,1,0,0,0,87,
88,5,44,0,0,88,6,1,0,0,0,89,90,5,41,0,0,90,8,1,0,0,0,91,92,5,61,0,0,92,93,
5,62,0,0,93,10,1,0,0,0,94,95,5,105,0,0,95,96,5,102,0,0,96,12,1,0,0,0,97,
98,5,116,0,0,98,99,5,104,0,0,99,100,5,101,0,0,100,101,5,110,0,0,101,14,1,
0,0,0,102,103,5,101,0,0,103,104,5,108,0,0,104,105,5,115,0,0,105,106,5,101,
0,0,106,16,1,0,0,0,107,108,5,108,0,0,108,109,5,101,0,0,109,110,5,116,0,0,
110,18,1,0,0,0,111,112,5,123,0,0,112,20,1,0,0,0,113,114,5,125,0,0,114,22,
1,0,0,0,115,116,5,105,0,0,116,117,5,110,0,0,117,24,1,0,0,0,118,119,5,112,
0,0,119,120,5,114,0,0,120,121,5,105,0,0,121,122,5,110,0,0,122,123,5,116,
0,0,123,26,1,0,0,0,124,125,5,99,0,0,125,126,5,111,0,0,126,127,5,110,0,0,
127,128,5,115,0,0,128,129,5,116,0,0,129,28,1,0,0,0,130,131,5,61,0,0,131,
30,1,0,0,0,132,133,5,43,0,0,133,32,1,0,0,0,134,135,5,45,0,0,135,34,1,0,0,
0,136,137,5,42,0,0,137,36,1,0,0,0,138,139,5,47,0,0,139,38,1,0,0,0,140,141,
5,61,0,0,141,142,5,61,0,0,142,40,1,0,0,0,143,144,5,33,0,0,144,145,5,61,0,
0,145,42,1,0,0,0,146,147,5,62,0,0,147,44,1,0,0,0,148,149,5,62,0,0,149,150,
5,61,0,0,150,46,1,0,0,0,151,152,5,60,0,0,152,48,1,0,0,0,153,154,5,60,0,0,
154,155,5,61,0,0,155,50,1,0,0,0,156,157,5,116,0,0,157,158,5,114,0,0,158,
159,5,117,0,0,159,160,5,101,0,0,160,52,1,0,0,0,161,162,5,102,0,0,162,163,
5,97,0,0,163,164,5,108,0,0,164,165,5,115,0,0,165,166,5,101,0,0,166,54,1,
0,0,0,167,168,5,110,0,0,168,169,5,117,0,0,169,170,5,108,0,0,170,171,5,108,
0,0,171,56,1,0,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,112,0,0,
175,176,5,117,0,0,176,177,5,116,0,0,177,58,1,0,0,0,178,179,5,91,0,0,179,
60,1,0,0,0,180,181,5,93,0,0,181,62,1,0,0,0,182,184,7,0,0,0,183,182,1,0,0,
0,183,184,1,0,0,0,184,186,1,0,0,0,185,187,7,1,0,0,186,185,1,0,0,0,187,188,
1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,64,1,0,0,0,190,192,7,0,0,0,191,
190,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,195,7,1,0,0,194,193,1,0,
0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,
200,5,46,0,0,199,201,7,1,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,200,1,0,
0,0,202,203,1,0,0,0,203,66,1,0,0,0,204,206,7,0,0,0,205,204,1,0,0,0,205,206,
1,0,0,0,206,208,1,0,0,0,207,209,7,1,0,0,208,207,1,0,0,0,209,210,1,0,0,0,
210,208,1,0,0,0,210,211,1,0,0,0,211,218,1,0,0,0,212,214,5,46,0,0,213,215,
7,1,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,
217,219,1,0,0,0,218,212,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,222,
7,2,0,0,221,223,7,3,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,
224,226,7,1,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,
1,0,0,0,228,68,1,0,0,0,229,235,5,34,0,0,230,234,8,4,0,0,231,232,5,92,0,0,
232,234,9,0,0,0,233,230,1,0,0,0,233,231,1,0,0,0,234,237,1,0,0,0,235,233,
1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,5,34,0,0,
239,70,1,0,0,0,240,242,7,5,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,
0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,6,35,0,0,246,72,1,0,0,0,247,
248,5,47,0,0,248,249,5,47,0,0,249,253,1,0,0,0,250,252,8,6,0,0,251,250,1,
0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,
253,1,0,0,0,256,257,6,36,0,0,257,74,1,0,0,0,258,259,5,47,0,0,259,260,5,42,
0,0,260,264,1,0,0,0,261,263,9,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,
265,1,0,0,0,264,262,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,5,42,
0,0,268,269,5,47,0,0,269,270,1,0,0,0,270,271,6,37,0,0,271,76,1,0,0,0,272,
276,7,7,0,0,273,275,7,8,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,
0,0,276,277,1,0,0,0,277,78,1,0,0,0,278,276,1,0,0,0,279,283,3,63,31,0,280,
283,3,65,32,0,281,283,3,67,33,0,282,279,1,0,0,0,282,280,1,0,0,0,282,281,
1,0,0,0,283,80,1,0,0,0,19,0,183,188,191,196,202,205,210,216,218,222,227,
233,235,243,253,264,276,282,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class biesCLexer extends antlr4.Lexer {

    static grammarFileName = "biesC.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'fun'", "'('", "','", "')'", "'=>'", "'if'", 
                         "'then'", "'else'", "'let'", "'{'", "'}'", "'in'", 
                         "'print'", "'const'", "'='", "'+'", "'-'", "'*'", 
                         "'/'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
                         "'true'", "'false'", "'null'", "'input'", "'['", 
                         "']'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          "INT", "FLOAT", "SCI", "STRING", "WS", "LC", "BC", 
                          "ID", "NUMBER" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "INT", "FLOAT", "SCI", "STRING", "WS", "LC", "BC", 
                      "ID", "NUMBER" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

biesCLexer.EOF = antlr4.Token.EOF;
biesCLexer.T__0 = 1;
biesCLexer.T__1 = 2;
biesCLexer.T__2 = 3;
biesCLexer.T__3 = 4;
biesCLexer.T__4 = 5;
biesCLexer.T__5 = 6;
biesCLexer.T__6 = 7;
biesCLexer.T__7 = 8;
biesCLexer.T__8 = 9;
biesCLexer.T__9 = 10;
biesCLexer.T__10 = 11;
biesCLexer.T__11 = 12;
biesCLexer.T__12 = 13;
biesCLexer.T__13 = 14;
biesCLexer.T__14 = 15;
biesCLexer.T__15 = 16;
biesCLexer.T__16 = 17;
biesCLexer.T__17 = 18;
biesCLexer.T__18 = 19;
biesCLexer.T__19 = 20;
biesCLexer.T__20 = 21;
biesCLexer.T__21 = 22;
biesCLexer.T__22 = 23;
biesCLexer.T__23 = 24;
biesCLexer.T__24 = 25;
biesCLexer.T__25 = 26;
biesCLexer.T__26 = 27;
biesCLexer.T__27 = 28;
biesCLexer.T__28 = 29;
biesCLexer.T__29 = 30;
biesCLexer.T__30 = 31;
biesCLexer.INT = 32;
biesCLexer.FLOAT = 33;
biesCLexer.SCI = 34;
biesCLexer.STRING = 35;
biesCLexer.WS = 36;
biesCLexer.LC = 37;
biesCLexer.BC = 38;
biesCLexer.ID = 39;
biesCLexer.NUMBER = 40;



